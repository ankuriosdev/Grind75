// Topic: Valid Parentheses// Difficulty: Easy// LeetCode Problem: https://leetcode.com/problems/valid-parentheses/// Asked by: Amazon, Microsoft, Facebookclass Solution1 {    func isValid(_ s: String) -> Bool {                // If the string length is odd, it can't be valid        guard s.count % 2 == 0 else { return false }                var stack: [Character] = []                // Iterate through the characters of the string        for ch in s {            switch ch {            case "(":                // For each opening bracket, push the corresponding closing bracket                stack.append(")")            case "[":                stack.append("]")            case "{":                stack.append("}")            default:                // For any closing bracket, check if it matches the top of the stack                if stack.isEmpty || stack.removeLast() != ch {                    return false                }            }        }                // If the stack is empty, all brackets were properly closed        return stack.isEmpty    }}// Time Complexity: O(n), where n is the length of the string.// We traverse each character once, and operations on the stack (push and pop) are O(1).// Space Complexity: O(n), where n is the length of the string in the worst case.// The stack can hold up to n/2 opening brackets if the string is fully composed of them.