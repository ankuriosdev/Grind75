// Topic: Intervals// Difficulty: Medium// LeetCode Problem: https://leetcode.com/problems/insert-interval/// Asked by: Google, Facebook, Amazonclass Solution {    func insert(_ intervals: [[Int]], _ newInterval: [Int]) -> [[Int]] {        var result: [[Int]] = []        var i = 0        let n = intervals.count        var newInterval = newInterval        // Step 1: Add all intervals that come before the new interval (non-overlapping)        while i < n && intervals[i][1] < newInterval[0] {            result.append(intervals[i])            i += 1        }        // Step 2: Merge overlapping intervals        while i < n && intervals[i][0] <= newInterval[1] {            newInterval[0] = min(newInterval[0], intervals[i][0]) // update start            newInterval[1] = max(newInterval[1], intervals[i][1]) // update end            i += 1        }        result.append(newInterval) // add the merged interval        // Step 3: Add all intervals that come after the new interval (non-overlapping)        while i < n {            result.append(intervals[i])            i += 1        }        return result    }}// Time Complexity: O(n)// We iterate through the entire list of intervals once, where n is the number of intervals.// Space Complexity: O(n)// We are storing the result in a new array that may contain up to all the original intervals and the new one.