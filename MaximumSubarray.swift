// Topic: Dynamic Programming// Difficulty: Medium// LeetCode Problem: https://leetcode.com/problems/maximum-subarray/// Asked by: Amazon, Microsoft, Googleclass Solution {    func maxSubArray(_ nums: [Int]) -> Int {        // Initialize variables        var currentSum = nums[0] // The sum of the current subarray        var maxSum = nums[0]     // The maximum sum found so far        // Traverse through the array starting from the second element        for i in 1..<nums.count {            // Decide whether to start a new subarray or continue the current one            currentSum = max(nums[i], currentSum + nums[i])                        // Update the maximum sum if currentSum is larger            maxSum = max(maxSum, currentSum)        }        return maxSum    }}// Time Complexity: O(n)// We traverse the array once, so the time complexity is linear with respect to the size of the array.// Space Complexity: O(1)// We only use a few extra variables to store the current sum and max sum, making the space complexity constant.